---
- name: Set up Jenkins service account in Kubernetes and prepare kubeconfig
  hosts: master
  become: yes
  tasks:
    - name: Create Jenkins service account
      copy:
        content: |
          apiVersion: v1
          kind: ServiceAccount
          metadata:
            name: jenkins
            namespace: default
        dest: /tmp/jenkins-service-account.yaml

    - name: Create ClusterRoleBinding for Jenkins service account
      copy:
        content: |
          apiVersion: rbac.authorization.k8s.io/v1
          kind: ClusterRoleBinding
          metadata:
            name: jenkins
          roleRef:
            apiGroup: rbac.authorization.k8s.io
            kind: ClusterRole
            name: cluster-admin
          subjects:
          - kind: ServiceAccount
            name: jenkins
            namespace: default
        dest: /tmp/jenkins-cluster-role-binding.yaml

    - name: Apply Jenkins service account configuration
      command: /usr/local/bin/k3s kubectl apply -f /tmp/jenkins-service-account.yaml

    - name: Apply ClusterRoleBinding for Jenkins service account
      command: /usr/local/bin/k3s kubectl apply -f /tmp/jenkins-cluster-role-binding.yaml

    - name: Generate kubeconfig for Jenkins service account
      shell: |
        TOKEN=$(/usr/local/bin/k3s kubectl -n default get secret $(
          /usr/local/bin/k3s kubectl -n default get sa/jenkins -o jsonpath="{.secrets[0].name}"
        ) -o jsonpath="{.data.token}" | base64 --decode)
        NAMESPACE=$(/usr/local/bin/k3s kubectl get sa/jenkins -o jsonpath="{.metadata.namespace}")
        SERVER=$(/usr/local/bin/k3s kubectl config view --minify -o jsonpath="{.clusters[0].cluster.server}")
        CERT=$(/usr/local/bin/k3s kubectl get secret $(
          /usr/local/bin/k3s kubectl -n default get sa/jenkins -o jsonpath="{.secrets[0].name}"
        ) -o jsonpath="{.data['ca\.crt']}" | base64 --decode)

        cat <<EOF > /tmp/k3s-jenkins.yaml
        apiVersion: v1
        kind: Config
        clusters:
        - cluster:
            certificate-authority-data: $(echo $CERT | base64 | tr -d '\n')
            server: $SERVER
          name: k3s
        contexts:
        - context:
            cluster: k3s
            namespace: $NAMESPACE
            user: jenkins
          name: jenkins
        current-context: jenkins
        users:
        - name: jenkins
          user:
            token: $TOKEN
        EOF
    - name: Ensure the kubeconfig file is readable
      file:
        path: /tmp/k3s-jenkins.yaml
        mode: '0644'