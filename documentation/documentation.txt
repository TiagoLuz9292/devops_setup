Install jenkins

go to /home/ec2-user/devops_setup/admin_server/jenkins-docker

docker build -t my-jenkins .

Run Jenkins:

  docker run -d \
  --name jenkins \
  -p 8080:8080 \
  -p 50000:50000 \
  -v /root/aws_credentials:/home/ec2-user/.aws \
  -v /var/run/docker.sock:/var/run/docker.sock \
  -v /home/ec2-user/devops_setup:/home/ec2-user/devops_setup \
  -v /home/tluz/jenkins_home:/var/jenkins_home \
  -v /root/project:/root/project \
  --user root \
  my-jenkins



Check jenkins logs for the password:

docker logs jenkins

configure Jenkins for aws

Using Jenkins Cloud Plugin for AWS
Install the Amazon EC2 Plugin:

Go to Manage Jenkins -> Manage Plugins.
In the Available tab, search for Amazon EC2 plugin and install it.
Configure AWS Credentials:

Go to Manage Jenkins -> Manage Credentials.
Add credentials with AWS Access Key ID and Secret Access Key. Ensure these credentials have the necessary permissions to manage EC2 instances.
Configure EC2 Cloud in Jenkins:

Go to Manage Jenkins -> Configure System.
Scroll down to the Cloud section and click Add a new cloud -> Amazon EC2.
Enter the AWS credentials you added earlier.
Configure the EC2 region and other details like instance cap, AMI ID, SSH key, etc.

Also add credentials for Docker hub, GitHub/GitLab

------------------------------------------------------------------------------------------------------------------------------------------------------------------

CLEANUP of old pods/jobs


Question 1: Managing Pods
To view only the running or pending pods and not the old ones, you can use kubectl get pods with additional flags to filter the output.

Filtering Running or Pending Pods
You can filter the pods based on their status using kubectl get pods and grep. Here's how:

kubectl get pods --all-namespaces | grep -E 'Running|Pending'

Alternatively, you can use kubectl get pods with the --field-selector flag:

kubectl get pods --all-namespaces --field-selector=status.phase=Running,status.phase=Pending

Cleaning Up Old Pods
Old pods, especially those that have been terminated, can take up storage space. It's a good practice to clean up these pods. Hereâ€™s how to delete terminated pods:

Delete Terminated Pods:

kubectl delete pod --field-selector=status.phase=Succeeded
kubectl delete pod --field-selector=status.phase=Failed

Clean Up Completed Jobs:
If you are using jobs, ensure you clean up completed jobs:

kubectl delete job --all --field-selector=status.successful=1
Set Up a CronJob for Cleanup:
You can set up a cron job to periodically clean up old pods:

kubectl apply -f - <<EOF
apiVersion: batch/v1beta1
kind: CronJob
metadata:
  name: cleanup-pods
  namespace: default
spec:
  schedule: "0 0 * * *"
  jobTemplate:
    spec:
      template:
        spec:
          containers:
          - name: kubectl
            image: bitnami/kubectl
            command: ["sh", "-c", "kubectl delete pod --field-selector=status.phase=Succeeded,status.phase=Failed"]
          restartPolicy: OnFailure
EOF

------------------------------------

